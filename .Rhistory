hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
##
##  exponentialMechanism.r
##
##  demonstrate exponential mechanism on release of medians
##
##  jH 2019.2.28
##
rm(list=ls())		# Remove any objects in memory
par(mfrow=c(1,1))   # Rebuild fresh plot window, if previously divided
#### Parameters ####
set.seed(1234)
n.sims <- 2000
## Bound/Censor/Clip a variable to a range
clip <- function(x, lower, upper){
x.clipped <- x
x.clipped[x.clipped<lower] <- lower
x.clipped[x.clipped>upper] <- upper
return(x.clipped)
}
## Sample with replacement from a vector
bootstrap <- function(x, y=NULL, n){
index <- sample(x=1:length(x), size=n, replace=TRUE)
if(is.null(y)){
return(x[index])
}else{
return(list(x=x[index], y=y[index]))
}
}
## Load the data
library("foreign")
setwd("/Users/lipikaramaswamy/Documents/Harvard/CS208/cs208_lr/")
PUMSdata <- read.csv(file="data/FultonPUMS5full.csv")
data <- PUMSdata$educ    		# variable for means
populationTrue <- median(data)
medianRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- median(x)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- min(sum(x.clipped <= bins[i]), sum(x.clipped >= bins[i]))                # this is utility FIXED IN CLASS
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom() ## alternative to using a multinomial dist
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
## Show repeated releases on one sample of data
sample.index <- sample(1:length(data), size=100, replace=FALSE)
x <- data[sample.index]
history <- rep(NA, n.sims)
for(i in 1:n.sims){
history[i] <- medianRelease(x=x, lower=1, upper=16, epsilon=1.5)$release
}
par(mfcol=c(2,1))
x.clipped <- clip(x, lower=1, upper=16)
hist(x.clipped, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of private data")
abline(v=median(x.clipped), col="red", lwd=1.5, lty=2)
dev.copy2pdf(file="./figs/medianExampleDataDist.pdf")
hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
dev.copy2pdf(file="./figs/medianExample.pdf")
## Simulate the exponential mechanism across bootstrapped datasets to see utility
my.seq <- seq(from=log10(50), to=log10(1000), length=20)  	# make evenly spaced in logarithmic space
n.seq  <- round(10^my.seq)                                 	# round to integers
my.seq <- seq(from=log10(1), to=log10(0.01), length=5)     	# make evenly spaced in logarithmic space
ep.seq <- round(10^my.seq * 100) /100						# round to two decimal places
rawhistory <- matrix(NA, nrow=length(n.seq)*length(ep.seq)*n.sims, ncol=4)  # matrix to store results
agghistory <- matrix(NA, nrow=length(n.seq)*length(ep.seq), ncol=4)         # matrix to store results
rawcount <- 0												# counter
aggcount <- 0                                               # counter
for(i in 1:length(n.seq)){
for(j in 1:length(ep.seq)){
error <- utility <- NULL
aggcount <- aggcount + 1
for(k in 1:n.sims){
rawcount <- rawcount + 1
## Median release
bootdata <- bootstrap(x=data, n=n.seq[i])
DPmedian <- medianRelease(x=bootdata, lower=1, upper=16, epsilon=ep.seq[j])
release <- DPmedian$release
sampleTrue <- DPmedian$true
error <- c(error, sampleTrue - release)
utility <- c(utility, min( sum(bootdata<=release), sum(bootdata>=release)) )
rawhistory[rawcount, 1] <- n.seq[i]
rawhistory[rawcount, 2] <- ep.seq[j]
rawhistory[rawcount, 3] <- release
rawhistory[rawcount, 4] <- sampleTrue
}
agghistory[aggcount, 1] <- n.seq[i]
agghistory[aggcount, 2] <- ep.seq[j]
agghistory[aggcount, 3] <- sqrt( mean( (error)^2 ) )  # RMSE
agghistory[aggcount, 4] <- mean(utility/n.seq[i])
}
}
## Graphs for plotting results in terms of RMSE and utilty
par(mfrow=c(2,2))
color.palette<-rainbow(length(ep.seq), start=.7, end=.1)   # This creates a sequence of colors to use in subsequent plots, as in showchisq.r
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(0, max(agghistory[,3]))
if(j==1){
plot(subhistory[,1],subhistory[,3], ylim=allylim, type="l", col=color.palette[j], xlab="N", ylab="RMSE")
}else{
lines(subhistory[,1],subhistory[,3], col=color.palette[j])
}
}
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(min(agghistory[,3])+0.00001, max(agghistory[,3]))
xloc <- round(length(n.seq)*0.3)
if(j==1){
plot(subhistory[,1],subhistory[,3]+0.00001, ylim=allylim, type="l", log = "y", col=color.palette[j], xlab="N", ylab="RMSE")
text(x=subhistory[xloc,1], y=subhistory[xloc,3]+0.00001, label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}else{
lines(subhistory[,1],subhistory[,3]+0.00001, col=color.palette[j])
text(x=subhistory[xloc,1], y=subhistory[xloc,3]+0.00001, label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}
}
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(0, max(agghistory[,4]))
if(j==1){
plot(subhistory[,1],subhistory[,4], ylim=allylim, type="l", col=color.palette[j], xlab="N", ylab="Utility/n")
}else{
lines(subhistory[,1],subhistory[,4], col=color.palette[j])
}
}
abline(h=0.5, lty=2)
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(min(agghistory[,4]), max(agghistory[,4]))
xloc <- round(length(n.seq)*0.3)
if(j==1){
plot(subhistory[,1],subhistory[,4], ylim=allylim, type="l", log = "y", col=color.palette[j], xlab="N", ylab="Utility/n")
text(x=subhistory[xloc,1], y=subhistory[xloc,4], label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}else{
lines(subhistory[,1],subhistory[,4], col=color.palette[j])
text(x=subhistory[xloc,1], y=subhistory[xloc,4], label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}
}
abline(h=0.5, lty=2)
# dev.copy2pdf(file="./figs/medianRelease.pdf")
##
##  exponentialMechanism.r
##
##  demonstrate exponential mechanism on release of medians
##
##  jH 2019.2.28
##
rm(list=ls())		# Remove any objects in memory
par(mfrow=c(1,1))   # Rebuild fresh plot window, if previously divided
#### Parameters ####
set.seed(1234)
n.sims <- 2000
## Bound/Censor/Clip a variable to a range
clip <- function(x, lower, upper){
x.clipped <- x
x.clipped[x.clipped<lower] <- lower
x.clipped[x.clipped>upper] <- upper
return(x.clipped)
}
## Sample with replacement from a vector
bootstrap <- function(x, y=NULL, n){
index <- sample(x=1:length(x), size=n, replace=TRUE)
if(is.null(y)){
return(x[index])
}else{
return(list(x=x[index], y=y[index]))
}
}
## Load the data
library("foreign")
setwd("/Users/lipikaramaswamy/Documents/Harvard/CS208/cs208_lr/")
PUMSdata <- read.csv(file="data/FultonPUMS5full.csv")
data <- PUMSdata$educ    		# variable for means
populationTrue <- median(data)
medianRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- median(x)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- min(sum(x.clipped <= bins[i]), sum(x.clipped >= bins[i]))                # this is utility FIXED IN CLASS
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom() ## alternative to using a multinomial dist
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
## Show repeated releases on one sample of data
sample.index <- sample(1:length(data), size=100, replace=FALSE)
x <- data[sample.index]
history <- rep(NA, n.sims)
for(i in 1:n.sims){
history[i] <- medianRelease(x=x, lower=1, upper=16, epsilon=1.5)$release
}
par(mfcol=c(2,1))
x.clipped <- clip(x, lower=1, upper=16)
hist(x.clipped, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of private data")
abline(v=median(x.clipped), col="red", lwd=1.5, lty=2)
dev.copy2pdf(file="./figs/medianExampleDataDist.pdf")
hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
##
##  exponentialMechanism.r
##
##  demonstrate exponential mechanism on release of medians
##
##  jH 2019.2.28
##
rm(list=ls())		# Remove any objects in memory
par(mfrow=c(1,1))   # Rebuild fresh plot window, if previously divided
#### Parameters ####
set.seed(1234)
n.sims <- 2000
## Bound/Censor/Clip a variable to a range
clip <- function(x, lower, upper){
x.clipped <- x
x.clipped[x.clipped<lower] <- lower
x.clipped[x.clipped>upper] <- upper
return(x.clipped)
}
## Sample with replacement from a vector
bootstrap <- function(x, y=NULL, n){
index <- sample(x=1:length(x), size=n, replace=TRUE)
if(is.null(y)){
return(x[index])
}else{
return(list(x=x[index], y=y[index]))
}
}
## Load the data
library("foreign")
setwd("/Users/lipikaramaswamy/Documents/Harvard/CS208/cs208_lr/")
PUMSdata <- read.csv(file="data/FultonPUMS5full.csv")
data <- PUMSdata$educ    		# variable for means
populationTrue <- median(data)
medianRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- median(x)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- min(sum(x.clipped <= bins[i]), sum(x.clipped >= bins[i]))                # this is utility FIXED IN CLASS
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom() ## alternative to using a multinomial dist
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
## Show repeated releases on one sample of data
sample.index <- sample(1:length(data), size=100, replace=FALSE)
x <- data[sample.index]
history <- rep(NA, n.sims)
for(i in 1:n.sims){
history[i] <- medianRelease(x=x, lower=1, upper=16, epsilon=3)$release
}
par(mfcol=c(2,1))
x.clipped <- clip(x, lower=1, upper=16)
hist(x.clipped, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of private data")
abline(v=median(x.clipped), col="red", lwd=1.5, lty=2)
dev.copy2pdf(file="./figs/medianExampleDataDist.pdf")
hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
medianRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- median(x)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- min(sum(x.clipped <= bins[i]), sum(x.clipped >= bins[i]))                # this is utility FIXED IN CLASS
}
likelihoods <- exp(epsilon * quality / 2)
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom() ## alternative to using a multinomial dist
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
sample.index <- sample(1:length(data), size=100, replace=FALSE)
x <- data[sample.index]
history <- rep(NA, n.sims)
for(i in 1:n.sims){
history[i] <- medianRelease(x=x, lower=1, upper=16, epsilon=3)$release
}
par(mfcol=c(2,1))
x.clipped <- clip(x, lower=1, upper=16)
hist(x.clipped, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of private data")
abline(v=median(x.clipped), col="red", lwd=1.5, lty=2)
dev.copy2pdf(file="./figs/medianExampleDataDist.pdf")
hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
history <- rep(NA, n.sims)
for(i in 1:n.sims){
history[i] <- medianRelease(x=x, lower=1, upper=16, epsilon=0.1)$release
}
par(mfcol=c(2,1))
x.clipped <- clip(x, lower=1, upper=16)
hist(x.clipped, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of private data")
abline(v=median(x.clipped), col="red", lwd=1.5, lty=2)
dev.copy2pdf(file="./figs/medianExampleDataDist.pdf")
hist(history, breaks=(1:17 -0.5), col="dodgerblue3", main="Histogram of released DP medians")
my.seq <- seq(from=log10(50), to=log10(1000), length=20)  	# make evenly spaced in logarithmic space
n.seq  <- round(10^my.seq)                                 	# round to integers
my.seq <- seq(from=log10(1), to=log10(0.01), length=5)     	# make evenly spaced in logarithmic space
ep.seq <- round(10^my.seq * 100) /100						# round to two decimal places
rawhistory <- matrix(NA, nrow=length(n.seq)*length(ep.seq)*n.sims, ncol=4)  # matrix to store results
agghistory <- matrix(NA, nrow=length(n.seq)*length(ep.seq), ncol=4)         # matrix to store results
rawcount <- 0												# counter
aggcount <- 0                                               # counter
for(i in 1:length(n.seq)){
for(j in 1:length(ep.seq)){
error <- utility <- NULL
aggcount <- aggcount + 1
for(k in 1:n.sims){
rawcount <- rawcount + 1
## Median release
bootdata <- bootstrap(x=data, n=n.seq[i])
DPmedian <- medianRelease(x=bootdata, lower=1, upper=16, epsilon=ep.seq[j])
release <- DPmedian$release
sampleTrue <- DPmedian$true
error <- c(error, sampleTrue - release)
utility <- c(utility, min( sum(bootdata<=release), sum(bootdata>=release)) )
rawhistory[rawcount, 1] <- n.seq[i]
rawhistory[rawcount, 2] <- ep.seq[j]
rawhistory[rawcount, 3] <- release
rawhistory[rawcount, 4] <- sampleTrue
}
agghistory[aggcount, 1] <- n.seq[i]
agghistory[aggcount, 2] <- ep.seq[j]
agghistory[aggcount, 3] <- sqrt( mean( (error)^2 ) )  # RMSE
agghistory[aggcount, 4] <- mean(utility/n.seq[i])
}
}
par(mfrow=c(2,2))
color.palette<-rainbow(length(ep.seq), start=.7, end=.1)   # This creates a sequence of colors to use in subsequent plots, as in showchisq.r
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(0, max(agghistory[,3]))
if(j==1){
plot(subhistory[,1],subhistory[,3], ylim=allylim, type="l", col=color.palette[j], xlab="N", ylab="RMSE")
}else{
lines(subhistory[,1],subhistory[,3], col=color.palette[j])
}
}
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(min(agghistory[,3])+0.00001, max(agghistory[,3]))
xloc <- round(length(n.seq)*0.3)
if(j==1){
plot(subhistory[,1],subhistory[,3]+0.00001, ylim=allylim, type="l", log = "y", col=color.palette[j], xlab="N", ylab="RMSE")
text(x=subhistory[xloc,1], y=subhistory[xloc,3]+0.00001, label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}else{
lines(subhistory[,1],subhistory[,3]+0.00001, col=color.palette[j])
text(x=subhistory[xloc,1], y=subhistory[xloc,3]+0.00001, label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}
}
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(0, max(agghistory[,4]))
if(j==1){
plot(subhistory[,1],subhistory[,4], ylim=allylim, type="l", col=color.palette[j], xlab="N", ylab="Utility/n")
}else{
lines(subhistory[,1],subhistory[,4], col=color.palette[j])
}
}
abline(h=0.5, lty=2)
for(j in 1:length(ep.seq)){
flag <- agghistory[,2] == ep.seq[j]
subhistory <- agghistory[flag,]
allylim <- c(min(agghistory[,4]), max(agghistory[,4]))
xloc <- round(length(n.seq)*0.3)
if(j==1){
plot(subhistory[,1],subhistory[,4], ylim=allylim, type="l", log = "y", col=color.palette[j], xlab="N", ylab="Utility/n")
text(x=subhistory[xloc,1], y=subhistory[xloc,4], label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}else{
lines(subhistory[,1],subhistory[,4], col=color.palette[j])
text(x=subhistory[xloc,1], y=subhistory[xloc,4], label=  bquote(paste(epsilon == .(ep.seq[j]))), col=color.palette[j], pos=4)
}
}
abline(h=0.5, lty=2)
library("foreign")
par(ask=TRUE)
PUMSdata <- read.csv(file="../../data/FultonPUMS5full.csv")
data <- PUMSdata$educ    		# variable for means
data.x <- PUMSdata$educ			# x-variable for regression
data.y <- PUMSdata$income		# y-variable for regression
populationTrue <- mean(data)
##  show probability distributions, cumulatives and their inverses, for Gaussian distribution
par(mfrow=c(2,2))
set.seed(123)
x<-seq(from=-5,to=5,length=100)
plot(x,dnorm(x),type="l",main="density function - dnorm")
x<-seq(from=.001,to=.999,length=100)
plot(x,qnorm(x),type="l",ylim=c(-3,3),main="inverse cumulative - qnorm")
hist(rnorm(n=1000),main="histogram of random draws - rnorm", breaks=seq(from=-5.25, to=5.25, by=0.5 ))
dev.copy2pdf(file="./figs/gaussianDistributions.pdf")
## Bound/Censor/Clip/Clamp a variable to a range
clip <- function(x, lower, upper){
x.clipped <- x
x.clipped[x.clipped<lower] <- lower
x.clipped[x.clipped>upper] <- upper
return(x.clipped)
}
## Sample with replacement from a vector
bootstrap <- function(x, y=NULL, n){
index <- sample(x=1:length(x), size=n, replace=TRUE)
if(is.null(y)){
return(x[index])
}else{
return(list(x=x[index], y=y[index]))
}
}
## Differentially private mean release using Laplace mechanism
laplaceMeanRelease <- function(x, lower, upper, epsilon){
n <- length(x)
sensitivity <- (upper - lower)/n
scale <- sensitivity / epsilon
x.clipped <- clip(x, lower, upper)
sensitiveValue <- mean(x.clipped)
DPrelease <- sensitiveValue + rlap(mu=0, b=scale, size=1)
return(list(release=DPrelease, true=sensitiveValue))
}
## Differentially private mean release using Gaussian mechanism
gaussianMeanRelease <- function(x, lower, upper, epsilon, delta){
n <- length(x)
sensitivity <- (upper - lower)/n
c <- sqrt(2*log(1.25/delta))
scale <- c*sensitivity / epsilon
x.clipped <- clip(x, lower, upper)
sensitiveValue <- mean(x.clipped)
DPrelease <- sensitiveValue + rnorm(mean=0, sd=scale, size=1)
return(list(release=DPrelease, true=sensitiveValue))
}
## Differentially private mean release using Gaussian mechanism
gaussianMeanRelease <- function(x, lower, upper, epsilon, delta){ ## have to add extra probability loss parameter
n <- length(x)
sensitivity <- (upper - lower)/n
c <- sqrt(2*log(1.25/delta))
scale <- c*sensitivity / epsilon
x.clipped <- clip(x, lower, upper)
sensitiveValue <- mean(x.clipped)
DPrelease <- sensitiveValue + rnorm(mean=0, sd=scale, size=1)
return(list(release=DPrelease, true=sensitiveValue))
}
delta <- 0.000001
x.seq <- seq(from=-10, to=10, length=100)
p1 <- dnorm(x.seq, mean=0, sd=1)
p2 <- dnorm(x.seq, mean=0.1, sd=1)
ratio1 <- p1/p2
ratio2 <- p2/p1
par(mfcol=c(2,1))
plot(x=x.seq, y=p1, col="blue", type="l", lwd=1.5, xlab="x", ylab="density")
abline(v=qnorm(delta/2), lty=2)
abline(v=qnorm(1-delta/2), lty=2)
plot(x=x.seq, y=ratio1, type="l", lwd=1.5, xlab="x", ylab="ratio of densities")
lines(x=x.seq, y=ratio2)
abline(v=qnorm(delta/2), lty=2)
abline(v=qnorm(1-delta/2), lty=2)
dev.copy2pdf(file="./figs/gaussianRatios1.pdf")
s<-seq(from=0, to=0.3, length=20)
max.ratio <- dnorm(qnorm(delta/2)) / dnorm(qnorm(delta/2) - s)
epsilon <- log(max.ratio)
plot(s, max.ratio, lwd=1.5, type="l", xlab="displacement", ylab="max of ratio")
dev.copy2pdf(file="./figs/gaussianRatios2.pdf")
gmsd <- function(epsilon, delta, sensitivity=1){
c <- sqrt(2*log(1.25/delta))
sd <- c*sensitivity / epsilon
return(sd)
}
my.seq <- seq(from=log10(0.1), to=log10(1), length=20)     		# make evenly spaced in logarithmic space -- NOTE INCREASING VALUES
ep.seq <- round(10^my.seq * 100) /100							# round to two decimal places
my.seq <- seq(from=log10(1e-20), to=log10(1e-5), length=16)     # note scientific notation
del.seq <- 10^my.seq
zhistory <- matrix(NA, nrow=length(ep.seq), ncol=length(del.seq))
for(i in 1:length(ep.seq)){
for(j in 1:length(del.seq)){
zhistory[i,j] <- gmsd(epsilon=ep.seq[i], delta=del.seq[j], sensitivity=1)
}
}
par(mfrow=c(1,1))
# Perspective plot of the utility surface
persp(x=log10(ep.seq), y=log10(del.seq), z=zhistory, axes=FALSE, theta=30, phi=30, xlab="epsilon", ylab="delta", zlab="sd noise")
# Contour plot of the utility surface
contour(x=log10(ep.seq), y=log10(del.seq), z=zhistory, xlab="epsilon", ylab="delta")
install.packages('IRkernel')
install.packages("IRkernel")
library(IRkernel)
IRkernel::installspec()
