round <- round_any(sample.sum.true, R)
means <- round /100
means <- 2*(means-0.5)
return(means)
}
## add gaussian noise if specified
if (gaussian == TRUE){
noisy <- sample.sum.true + rnorm(1,0,(gaussian.sigma))
means <- noisy / 100
means <- 2 * (means - 0.5)
return(means)
}
## subsample and scale query result if specified
if (subsample == TRUE){
subsample.index <- sample(x=1:nrow(samp), size=subsample.size, replace = FALSE)
subset <- samp[subsample.index,]
means <- as.vector(colMeans(subset, na.rm = FALSE, dims = 1))
means <- 2*(means-0.5)
return(means)
}
}
# Dwork et al. test statistic using population means
test.Dwork <- function(alice, sample.mean, population.mean){
test.statistic <- sum(alice * sample.mean) - sum(population.mean * sample.mean)
return(test.statistic)
}
## A utility function to create data from the population
rmvbernoulli <- function(n=1, prob){
history <- matrix(NA, nrow=n, ncol=length(prob))
for(i in 1:n){
x<- rbinom(n=length(prob), size=1, prob=prob)
x[x==0] <- -1      								# Transform from {0,1} to {-1,1}
history[i,] <- x
}
return(history)
}
# A null distribution and critical value generator
nullDistribution <- function(null.sims=1000, alpha=0.05, population.prob, fun, sample.mean, n.att){
population.mean <- 2*(population.prob-0.5)
hold <- rep(NA,null.sims)
for(i in 1:null.sims){
nullAlice <- rmvbernoulli(n=1, prob=population.prob[1:n.att])
hold[i] <- eval(fun(alice=nullAlice, sample.mean=sample.mean, population.mean=population.mean[1:n.att]))
}
nullDistribution <- sort(hold, decreasing=TRUE)
criticalValue <- nullDistribution[round(alpha*null.sims)]
return(list(nullDist=nullDistribution, criticalVal=criticalValue))
}
#### running sims for rounding defended membership attack
n.attributes = ncol(sample.augmented)
my.alpha <- 0.001
true.pos.rounding <- matrix(NA, nrow = n.attributes, ncol = 1)
sample.mean.rounding = membershipQuery(sample.augmented, rounding = TRUE, R = 100)
for(i in 9000:9050){
cat("\nin rounding loop, number of parameters is now ", i)
sample.mean <- sample.mean.rounding[1:i]
nullDist.Dwork <- nullDistribution(fun=test.Dwork,
alpha=my.alpha,
population.prob = population.prob,
sample.mean = sample.mean,
n.att = i)
pop.prob <- population.prob[1:i]
history.rounding <- matrix(NA, nrow = 100, ncol = 3)
for(row in 1:100){
## get real Alice from the sample
alice <- sample.augmented[row,1:i]
alice[alice==0] <- -1
## get the test stat for Alice
test.alice.Dwork <- test.Dwork(alice=alice, sample.mean=sample.mean, population.mean=pop.prob)
history.rounding[row,1]<-test.alice.Dwork
history.rounding[row,2]<- nullDist.Dwork$criticalVal
history.rounding[row,3]<-test.alice.Dwork>nullDist.Dwork$criticalVal
}
true.pos.rounding[i, 1] = sum(history.rounding[,3]/nrow(history.rounding))
}
true.pos.rounding[9000:9014]
for(i in 900:905){
cat("\nin rounding loop, number of parameters is now ", i)
sample.mean <- sample.mean.rounding[1:i]
nullDist.Dwork <- nullDistribution(fun=test.Dwork,
alpha=my.alpha,
population.prob = population.prob,
sample.mean = sample.mean,
n.att = i)
pop.prob <- population.prob[1:i]
history.rounding <- matrix(NA, nrow = 100, ncol = 3)
for(row in 1:100){
## get real Alice from the sample
alice <- sample.augmented[row,1:i]
alice[alice==0] <- -1
## get the test stat for Alice
test.alice.Dwork <- test.Dwork(alice=alice, sample.mean=sample.mean, population.mean=pop.prob)
history.rounding[row,1]<-test.alice.Dwork
history.rounding[row,2]<- nullDist.Dwork$criticalVal
history.rounding[row,3]<-test.alice.Dwork>nullDist.Dwork$criticalVal
}
true.pos.rounding[i, 1] = sum(history.rounding[,3]/nrow(history.rounding))
}
true.pos.rounding[900:905]
for(i in 5000:5005){
cat("\nin rounding loop, number of parameters is now ", i)
sample.mean <- sample.mean.rounding[1:i]
nullDist.Dwork <- nullDistribution(fun=test.Dwork,
alpha=my.alpha,
population.prob = population.prob,
sample.mean = sample.mean,
n.att = i)
pop.prob <- population.prob[1:i]
history.rounding <- matrix(NA, nrow = 100, ncol = 3)
for(row in 1:100){
## get real Alice from the sample
alice <- sample.augmented[row,1:i]
alice[alice==0] <- -1
## get the test stat for Alice
test.alice.Dwork <- test.Dwork(alice=alice, sample.mean=sample.mean, population.mean=pop.prob)
history.rounding[row,1]<-test.alice.Dwork
history.rounding[row,2]<- nullDist.Dwork$criticalVal
history.rounding[row,3]<-test.alice.Dwork>nullDist.Dwork$criticalVal
}
true.pos.rounding[i, 1] = sum(history.rounding[,3]/nrow(history.rounding))
}
true.pos.rounding[5000:5005]
for(i in 1000:1005){
cat("\nin rounding loop, number of parameters is now ", i)
sample.mean <- sample.mean.rounding[1:i]
nullDist.Dwork <- nullDistribution(fun=test.Dwork,
alpha=my.alpha,
population.prob = population.prob,
sample.mean = sample.mean,
n.att = i)
pop.prob <- population.prob[1:i]
history.rounding <- matrix(NA, nrow = 100, ncol = 3)
for(row in 1:100){
## get real Alice from the sample
alice <- sample.augmented[row,1:i]
alice[alice==0] <- -1
## get the test stat for Alice
test.alice.Dwork <- test.Dwork(alice=alice, sample.mean=sample.mean, population.mean=pop.prob)
history.rounding[row,1]<-test.alice.Dwork
history.rounding[row,2]<- nullDist.Dwork$criticalVal
history.rounding[row,3]<-test.alice.Dwork>nullDist.Dwork$criticalVal
}
true.pos.rounding[i, 1] = sum(history.rounding[,3]/nrow(history.rounding))
}
true.pos.rounding[1000:1005]
for(i in 3000:3005){
cat("\nin rounding loop, number of parameters is now ", i)
sample.mean <- sample.mean.rounding[1:i]
nullDist.Dwork <- nullDistribution(fun=test.Dwork,
alpha=my.alpha,
population.prob = population.prob,
sample.mean = sample.mean,
n.att = i)
pop.prob <- population.prob[1:i]
history.rounding <- matrix(NA, nrow = 100, ncol = 3)
for(row in 1:100){
## get real Alice from the sample
alice <- sample.augmented[row,1:i]
alice[alice==0] <- -1
## get the test stat for Alice
test.alice.Dwork <- test.Dwork(alice=alice, sample.mean=sample.mean, population.mean=pop.prob)
history.rounding[row,1]<-test.alice.Dwork
history.rounding[row,2]<- nullDist.Dwork$criticalVal
history.rounding[row,3]<-test.alice.Dwork>nullDist.Dwork$criticalVal
}
true.pos.rounding[i, 1] = sum(history.rounding[,3]/nrow(history.rounding))
}
true.pos.rounding[3000:3005]
gaussian.for.plots
## CS208
## Q2 - Reconstruction attack on PUMS
## import libraries
library(caret)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
# ------------------------------------------------- #
#### Parameters ####
## number of queries
k.trials <- 200
## number of rows in dataset
n <- 100
# ------------------------------------------------- #
### ALL THINGS DATA - Read in, subset, set aside sensitive data ###
setwd("/Users/lipikaramaswamy/Documents/Harvard/CS208/cs208_lr/")
## read in population
population <- read.csv('data/FultonPUMS5full.csv')
mean.uscitizen.true = mean(population$uscitizen)
## read in sample
pums <- read.csv("data/FultonPUMS5sample100.csv")
# subset data to that which is available to attacker
available.pums = select(pums, uscitizen, sex, age, educ, latino, black, asian, married,
divorced,children,disability,militaryservice,employed,englishability)
# make new column to contain randomly hashed values that determine membership to the random subsets
available.pums$subset.indicator<-NA
# set aside sensitive data:
sensitive.data <- pums[, "uscitizen"]
# ------------------------------------------------- #
### Setup to build random subsets of data ###
# Chose random large prime number
P = 491
# Make vector of all integers up to P
prime.options <- seq(from=0, to=P-1, by=1)
# ------------------------------------------------- #
### BUILD QUERY ###
runQuery <- function(df, rounding = FALSE, R = 0, gaussian = FALSE, gaussian.sigma = 0, subsample = FALSE, subsample.size = 1){
## random subset creation
r = sample(prime.options, size=13, replace = FALSE)
mat.of.obs = as.matrix(available.pums[,2:14])
p = (mat.of.obs %*% r) %% P %% 2
df$subset.indicator = p
## subsetting and returning the sum
subset = df[df$subset.indicator == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
## round if specified
if (rounding == TRUE){
round <- round_any(sum, R)
return(list(sum=round, index=index, truesum = sum))
}
## add gaussian noise if specified
if (gaussian == TRUE){
noisy <- sum + rnorm(1,0,(gaussian.sigma))
return(list(sum=noisy, index=index, truesum = sum))
}
## subsample and scale query result if specified
if (subsample == TRUE){
subsample.index <- sample(x=1:nrow(df), size=subsample.size, replace = FALSE)
subset <- df[subsample.index,]
subsetsum <- sum(subset$subset.indicator * subset$uscitizen) * (nrow(df)/subsample.size)
return(list(sum=subsetsum, index=index, truesum = sum))
}
## if none of the defense mechanisms are specified, return true sum
if (rounding == FALSE & rounding == FALSE & gaussian == FALSE){
return(list(index = index, truesum = sum))
}
}
# ------------------------------------------------- #
### RUNNING ATTACKS - MULTIPLE PARAMETERS, MULTIPLE EXPERIMENTS ###
## set varnames
xnames <- paste("x", 1:n, sep="")
varnames<- c("y", xnames)
## Make formula
formula <- paste(xnames, collapse=" + ")
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
## matrix to contain results of the queries and indices
history.rounding <- matrix(NA, nrow=k.trials, ncol=100+2)
history.gaussian <- matrix(NA, nrow=k.trials, ncol=100+2)
history.subsamp <- matrix(NA, nrow=k.trials, ncol=100+2)
## set parameter ranges to loop thru
parameter.range <- seq(from=1, to=100, by=1)
RMSE.matrix <- matrix (, nrow = 100, ncol = 10)
acc.matrix <- matrix (, nrow = 100, ncol = 10)
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, rounding = TRUE, R = a)
indicator <- 1:n %in% res$index
indicator <- as.numeric(indicator)
history.rounding[i,] <- c(res$truesum, res$sum, indicator)
}
## Convert matrix into data frame
release.data.rounding <- as.data.frame(history.rounding[,2:102])
names(release.data.rounding) <- varnames
## Run reg and get estimates
output.rounding <- lm(formula, data=release.data.rounding)
estimates.rounding <- output.rounding$coef
RMSE.matrix[a,b] <- postResample(history.rounding[,1], history.rounding[,2])[1]
correct.preds <- ((estimates.rounding>0.5) == sensitive.data)
acc.matrix[a,b] <- sum(correct.preds)/100
}
RMSE.rounding <-rowMeans(RMSE.matrix)
acc.rounding <-rowMeans(acc.matrix)
}
# parameter.range.gaussian <- c(seq(from=1, to=2, by=0.1) , seq(from=1, to=100, by=1))
# RMSE.matrix.gaussian <- matrix (, nrow = 111, ncol = 10)
# acc.matrix.gaussian <- matrix (, nrow = 111, ncol = 10)
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, gaussian = TRUE, gaussian.sigma = a)
indicator <- 1:n %in% res$index
indicator <- as.numeric(indicator)
history.gaussian[i,] <- c(res$truesum, res$sum, indicator)
}
## Convert matrix into data frame
release.data.gaussian <- as.data.frame(history.gaussian[,2:102])
names(release.data.gaussian) <- varnames
## Run reg and get estimates
output.gaussian <- lm(formula, data=release.data.gaussian)
estimates.gaussian <- output.gaussian$coef
RMSE.matrix[a,b] <- postResample(history.gaussian[,1], history.gaussian[,2])[1]
correct.preds <- (estimates.gaussian>0.5) & (sensitive.data==1) | (estimates.gaussian<0.5) & (sensitive.data==0)
acc.matrix[a,b] <- sum(correct.preds)/100}
}
RMSE.gaussian <-rowMeans(RMSE.matrix.gaussian)
acc.gaussian <-rowMeans(acc.matrix.gaussian)
}
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, subsample = TRUE, subsample.size = a)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history.subsamp[i,] <- c(res$truesum, res$sum, indicator)                    # save into our results matrix
}
## Convert matrix into data frame
release.data.subsamp <- as.data.frame(history.subsamp[,2:102])
names(release.data.subsamp) <- varnames
## Run reg and get estimates
output.subsamp <- lm(formula, data=release.data.subsamp)
estimates.subsamp <- output.subsamp$coef
RMSE.matrix[a,b] <- postResample(history.subsamp[,1], history.subsamp[,2])[1]
correct.preds <- (estimates.subsamp>0.5) & (sensitive.data==1) | (estimates.subsamp<0.5) & (sensitive.data==0)
acc.matrix[a,b] <- sum(correct.preds)/100
}
RMSE.subsamp <-rowMeans(RMSE.matrix)
acc.subsamp <-rowMeans(acc.matrix)
}
## PLOT Results
rounding.for.plots = data.frame(parameter.range, RMSE.rounding, acc.rounding)
p1 <- ggplot(rounding.for.plots, aes(x = parameter.range, y = RMSE.rounding)) +
geom_point() +
labs(x = "R", y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(rounding.for.plots, aes(x = parameter.range, y = acc.rounding)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "R", y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(rounding.for.plots, aes(x = RMSE.rounding, y = acc.rounding)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.rounding = grid.arrange(p1, p2, p3, nrow = 1)
ggsave(filename = 'rounding_plots.pdf', plot = plots.rounding, width = 11, height = 5, units = 'in')
###
gaussian.for.plots = data.frame(parameter.range.gaussian, RMSE.gaussian, acc.gaussian)
p4 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = RMSE.gaussian)) +
geom_point() +
labs(x = expression(paste(sigma)), y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = expression(paste(sigma)), y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p6 <- ggplot(gaussian.for.plots, aes(x = RMSE.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.gaussian = grid.arrange(p4, p5, p6, nrow = 1)
ggsave(filename = 'gaussian_plots.pdf', plot = plots.gaussian, width = 11, height = 5, units = 'in')
subsamp.for.plots = data.frame(parameter.range, RMSE.subsamp, acc.subsamp)
p7 <- ggplot(subsamp.for.plots, aes(x = parameter.range, y = RMSE.subsamp)) +
geom_point() +
labs(x = "t", y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p8 <- ggplot(subsamp.for.plots, aes(x = parameter.range, y = acc.subsamp)) +
geom_point() +
geom_hline(yintercept =  0.5, color = "darkcyan") +
labs(x = "t", y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = 0.5))
p9 <- ggplot(subsamp.for.plots, aes(x = RMSE.subsamp, y = acc.subsamp)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
plots.subsampling = grid.arrange(p7, p8, p9, nrow = 1)
ggsave(filename = 'subsampling_plots.pdf', plot = plots.subsampling, width = 11, height = 5, units = 'in')
### for next question
# rounding.for.plots[rounding.for.plots$acc.rounding == min(rounding.for.plots$acc.rounding),]
# gaussian.for.plots[gaussian.for.plots$acc.gaussian == min(gaussian.for.plots$acc.gaussian),]
# subsamp.for.plots[subsamp.for.plots$acc.subsamp == min(subsamp.for.plots$acc.subsamp),]
View(history.gaussian)
acc.rounding
gaussian.for.plots = data.frame(parameter.range.gaussian, RMSE.gaussian, acc.gaussian)
gaussian.for.plots = data.frame(parameter.range, RMSE.gaussian, acc.gaussian)
RMSE.gaussian
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, gaussian = TRUE, gaussian.sigma = a)
indicator <- 1:n %in% res$index
indicator <- as.numeric(indicator)
history.gaussian[i,] <- c(res$truesum, res$sum, indicator)
}
## Convert matrix into data frame
release.data.gaussian <- as.data.frame(history.gaussian[,2:102])
names(release.data.gaussian) <- varnames
## Run reg and get estimates
output.gaussian <- lm(formula, data=release.data.gaussian)
estimates.gaussian <- output.gaussian$coef
RMSE.matrix[a,b] <- postResample(history.gaussian[,1], history.gaussian[,2])[1]
correct.preds <- (estimates.gaussian>0.5) & (sensitive.data==1) | (estimates.gaussian<0.5) & (sensitive.data==0)
acc.matrix[a,b] <- sum(correct.preds)/100}
}
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, gaussian = TRUE, gaussian.sigma = a)
indicator <- 1:n %in% res$index
indicator <- as.numeric(indicator)
history.gaussian[i,] <- c(res$truesum, res$sum, indicator)
}
## Convert matrix into data frame
release.data.gaussian <- as.data.frame(history.gaussian[,2:102])
names(release.data.gaussian) <- varnames
## Run reg and get estimates
output.gaussian <- lm(formula, data=release.data.gaussian)
estimates.gaussian <- output.gaussian$coef
RMSE.matrix[a,b] <- postResample(history.gaussian[,1], history.gaussian[,2])[1]
correct.preds <- (estimates.gaussian>0.5) & (sensitive.data==1) | (estimates.gaussian<0.5) & (sensitive.data==0)
acc.matrix[a,b] <- sum(correct.preds)/100}
RMSE.gaussian <-rowMeans(RMSE.matrix.gaussian)
acc.gaussian <-rowMeans(acc.matrix.gaussian)
}
for(b in 1:10){
for(a in parameter.range){
## build matrix for regression
for(i in 1:k.trials){
res <- runQuery(df=available.pums, gaussian = TRUE, gaussian.sigma = a)
indicator <- 1:n %in% res$index
indicator <- as.numeric(indicator)
history.gaussian[i,] <- c(res$truesum, res$sum, indicator)
}
## Convert matrix into data frame
release.data.gaussian <- as.data.frame(history.gaussian[,2:102])
names(release.data.gaussian) <- varnames
## Run reg and get estimates
output.gaussian <- lm(formula, data=release.data.gaussian)
estimates.gaussian <- output.gaussian$coef
RMSE.matrix[a,b] <- postResample(history.gaussian[,1], history.gaussian[,2])[1]
correct.preds <- (estimates.gaussian>0.5) & (sensitive.data==1) | (estimates.gaussian<0.5) & (sensitive.data==0)
acc.matrix[a,b] <- sum(correct.preds)/100}
RMSE.gaussian <-rowMeans(RMSE.matrix)
acc.gaussian <-rowMeans(acc.matrix)
}
RMSE.gaussian
gaussian.for.plots = data.frame(parameter.range, RMSE.gaussian, acc.gaussian)
p4 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = RMSE.gaussian)) +
geom_point() +
labs(x = expression(paste(sigma)), y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = expression(paste(sigma)), y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p6 <- ggplot(gaussian.for.plots, aes(x = RMSE.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.gaussian = grid.arrange(p4, p5, p6, nrow = 1)
ggsave(filename = 'gaussian_plots.pdf', plot = plots.gaussian, width = 11, height = 5, units = 'in')
gaussian.for.plots = data.frame(parameter.range, RMSE.gaussian, acc.gaussian)
p4 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = RMSE.gaussian)) +
geom_point() +
labs(x = expression(paste(sigma)), y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = expression(paste(sigma)), y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p6 <- ggplot(gaussian.for.plots, aes(x = RMSE.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.gaussian = grid.arrange(p4, p5, p6, nrow = 1)
p4 <- ggplot(gaussian.for.plots, aes(x = parameter.range, y = RMSE.gaussian)) +
geom_point() +
labs(x = expression(paste(sigma)), y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplot(gaussian.for.plots, aes(x = parameter.range.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = expression(paste(sigma)), y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p6 <- ggplot(gaussian.for.plots, aes(x = RMSE.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.gaussian = grid.arrange(p4, p5, p6, nrow = 1)
p4 <- ggplot(gaussian.for.plots, aes(x = parameter.range, y = RMSE.gaussian)) +
geom_point() +
labs(x = expression(paste(sigma)), y = 'RMSE', title = 'Root Mean Squared Error (RMSE)') +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplot(gaussian.for.plots, aes(x = parameter.range, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = expression(paste(sigma)), y = 'Accuracy', title = 'Accuracy') +
theme(plot.title = element_text(hjust = mean.uscitizen.true))
p6 <- ggplot(gaussian.for.plots, aes(x = RMSE.gaussian, y = acc.gaussian)) +
geom_point() +
geom_hline(yintercept = 0.5, color = "darkcyan") +
labs(x = "RMSE", y = 'Accuracy', title = 'Accuracy vs. RMSE') +
theme(plot.title = element_text(hjust = 0.5))
plots.gaussian = grid.arrange(p4, p5, p6, nrow = 1)
ggsave(filename = 'gaussian_plots.pdf', plot = plots.gaussian, width = 11, height = 5, units = 'in')
