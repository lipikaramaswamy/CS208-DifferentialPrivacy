vec = as.numeric(df[i,2:14])
r = sample(prime.options, size=num.cols, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
##### build query
query <- function(data){
for(i in 1:100){
vec = as.numeric(df[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
##### build query
query <- function(data){
for(i in 1:100){
vec = as.numeric(data[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
##### build query
query <- function(data){
for(i in 1:100){
vec = as.numeric(data[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
cat('query done')
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
cat('query done')
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
query(data=available.pums)
available.pums$p.v<-NA
##### build query
query <- function(data){
for(i in 1:100){
vec = as.numeric(data[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
query(data=available.pums)
build.one.subset <- function(df, num.rows=100, num.cols = 13){
df$p.v <- NA
for(i in 1:num.rows){
vec = as.numeric(df[i,2:14])
r = sample(prime.options, size=num.cols, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
}
##### build query
query <- function(data){
# for(i in 1:100){
#   vec = as.numeric(data[i,2:14])
#   r = sample(prime.options, size=13, replace = FALSE)
#   p = (sum(vec*r))%%P%%2
#   df$p.v[i] = p
# }
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
query(data=available.pums)
build.one.subset(available.pums)
View(available.pums)
build.one.subset <- function(df, num.rows=100, num.cols = 13){
for(i in 1:num.rows){
vec = as.numeric(df[i,2:14])
r = sample(prime.options, size=num.cols, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
}
library(dplyr)
#### Parameters ####
k.trials <- 200
## Read in data:
pums <- read.csv("../../data/FultonPUMS5sample100.csv")
### build random subsets of data
# Chose random large prime number
P = 491
# Make vector of all integers up to P
prime.options <- seq(from=0, to=P-1, by=1)
### subset data to that which is available to attacker
available.pums = select(pums, uscitizen, sex, age, educ, latino, black, asian, married,
divorced,children,disability,militaryservice,employed,englishability)
available.pums$p.v<-NA
build.one.subset <- function(df, num.rows=100, num.cols = 13){
for(i in 1:num.rows){
vec = as.numeric(df[i,2:14])
r = sample(prime.options, size=num.cols, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
}
build.one.subset(available.pums)
query(data=available.pums)
# for(i in 1:100){
#   vec = as.numeric(data[i,2:14])
#   r = sample(prime.options, size=13, replace = FALSE)
#   p = (sum(vec*r))%%P%%2
#   df$p.v[i] = p
# }
##### build query
query <- function(data){
for(i in 1:100){
vec = as.numeric(data[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
query(data=available.pums)
##### build query
query <- function(data){
for(i in 1:100){
cat('inside the for loop:', i)
vec = as.numeric(data[i,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[i] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
query(data=available.pums)
as.numeric(available.pums[i,2:14])
as.numeric(available.pums[1,2:14])
as.numeric(available.pums[4,2:14])
##### build query
query <- function(data){
for(j in 1:100){
cat('inside the for loop:', j)
vec = as.numeric(data[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
subset = data[data$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
query(data=available.pums)
##### build query
query <- function(df){
for(j in 1:100){
cat('inside the for loop:', j)
vec = as.numeric(df[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
subset = df[df$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
build.one.subset(available.pums)
query(data=available.pums)
query(df=available.pums)
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(data=available.pums)
cat('query done')
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
res <- query(df=available.pums)
##### build query
query <- function(df){
for(j in 1:100){
vec = as.numeric(df[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
subset = df[df$p.v == 1,]
sum <- sum(subset$uscitizen)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(df=available.pums)
cat('query done')
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
n <- 100        	# Dataset size
history <- matrix(NA, nrow=k.trials, ncol=100+1)            # a matrix to store results in
for(i in 1:k.trials){
cat('in loop number', i)
res <- query(df=available.pums)
cat('query done')
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
View(history)
xnames <- paste("x", 1:n, sep="")
varnames<- c("y", xnames)
releaseData <- as.data.frame(history)                     # convert matrix into data frame
names(releaseData) <- varnames
formula <- paste(xnames, collapse=" + ")                  # construct the formula, y ~ x1 ... xn -1
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
print(formula)
output <- lm(formula, data=releaseData)                   # run the regression
estimates <- output$coef
sensitiveData <- pums[, "uscitizen"]
true.1 <- (estimates>0.5) & (sensitiveData==1)            # Correctly predicted values
true.0 <- (estimates<0.5) & (sensitiveData==0)
true1.frac <- round(sum(true.1, na.rm=TRUE)/sum(sensitiveData)*100)/100
true0.frac <- round(sum(true.0, na.rm=TRUE)/sum(1-sensitiveData)*100)/100
truth.col<-1 + true.1 + true.0
delta <- 0.05                                             # Slight disturbance to add
jitterx <- runif(n=n, min=-delta, max=delta)
jittery <- runif(n=n, min=-delta, max=delta)
semi.blue <- rgb(0,90,239,200,maxColorValue=255)          # Slightly transparent colors
semi.red  <- rgb(239,90,0,200,maxColorValue=255)
col.values <- c(semi.red, semi.blue)
plot(x=estimates + jitterx, y=sensitiveData + jittery, xlab="estimate", ylab="sensitive value",
main="Reconstruction of USCitizen Variable", col=col.values[truth.col])
# Plot reconstruction against actual sensitive data
abline(v=0.5, lty=2)
text(x=0.5, y=0.8, labels=paste("fraction ones correct: ", true1.frac), pos=4)
text(x=0.5, y=0.2, labels=paste("fraction zeros correct: ", true0.frac), pos=2)
true.1
true1.frac
true0.frac
rmse(estimates, sensitiveData)
rmse(estimates, sensitiveData)
## import libraries
library(caret)
rmse(estimates, sensitiveData)
## import libraries
library(caret)
## import libraries
install.packages('caret')
## import libraries
library(caret)
rmse(estimates, sensitiveData)
rmse(estimates, sensitiveData)
rmse(estimates, sensitiveData)
postResample(estimates, sensitiveData)
postResample(estimates, sensitiveData)[1]
## Get RMSE
postResample(estimates, sensitiveData)
round_to_nearest <- function(s,R){ # s for sum
if (R == 0){return (s)}
else if (s <= R){return (R)}
else {
if(s %% R > R/2){return((s%%R +1)*R)}
else {return((s%%R - 1)*R)}
}
}
query <- function(df, R){
## random subset creation
for(j in 1:100){
vec = as.numeric(df[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
## subsetting and returning the sum
subset = df[df$p.v == 1,]
sum <- sum(subset$uscitizen)
round <- round_to_nearest(sum, R)
index = as.numeric(rownames(subset))
return(list(sum=sum, index=index))
}
round_to_nearest <- function(s,R){ # s for sum
if (R == 0){return (s)}
else if (s <= R){return (R)}
else {
if(s %% R > R/2){return((s%%R +1)*R)}
else {return((s%%R - 1)*R)}
}
}
for(i in 1:k.trials){
res <- query(df=available.pums, R = 3)
cat('query done')
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
xnames <- paste("x", 1:n, sep="")
varnames<- c("y", xnames)
releaseData <- as.data.frame(history)
names(releaseData) <- varnames
## Make formula
formula <- paste(xnames, collapse=" + ")
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
## Run reg and get estimates
output <- lm(formula, data=releaseData)
estimates <- output$coef
## Get RMSE
postResample(estimates, sensitiveData)[0]
xnames <- paste("x", 1:n, sep="")
varnames<- c("y", xnames)
releaseData <- as.data.frame(history)
names(releaseData) <- varnames
formula <- paste(xnames, collapse=" + ")
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
## Run reg and get estimates
output <- lm(formula, data=releaseData)
estimates <- output$coef
## Get RMSE
postResample(estimates, sensitiveData)[0]
## Get RMSE
postResample(estimates, sensitiveData)[0]
# set aside sensitive data:
sensitiveData <- pums[, "uscitizen"]
estimates
## Get RMSE
postResample(estimates, sensitiveData)
## Get RMSE
postResample(estimates, sensitiveData)[0]
## Get RMSE
postResample(estimates, sensitiveData)
## Get RMSE
postResample(estimates, sensitiveData)[1]
for(i in 1:k.trials){
res <- query(df=available.pums, R = 80)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
xnames <- paste("x", 1:n, sep="")
## Run reg and get estimates
output <- lm(formula, data=releaseData)
estimates <- output$coef
## Get RMSE
postResample(estimates, sensitiveData)[1]
query <- function(df, R){
## random subset creation
for(j in 1:100){
vec = as.numeric(df[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
## subsetting and returning the sum
subset = df[df$p.v == 1,]
sum <- sum(subset$uscitizen)
round <- round_to_nearest(sum, R)
index = as.numeric(rownames(subset))
return(list(sum=round, index=index))
}
for(i in 1:k.trials){
res <- query(df=available.pums, R = 80)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
}
xnames <- paste("x", 1:n, sep="")
varnames<- c("y", xnames)
releaseData <- as.data.frame(history)
names(releaseData) <- varnames
#
formula <- paste(xnames, collapse=" + ")
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
## Run reg and get estimates
output <- lm(formula, data=releaseData)
estimates <- output$coef
formula <- paste(xnames, collapse=" + ")
formula <- paste("y ~ ", formula, "-1")
formula <- as.formula(formula)
## Run reg and get estimates
output <- lm(formula, data=releaseData)
estimates <- output$coef
## Get RMSE
postResample(estimates, sensitiveData)[1]
R.rounding.range <- seq(from=0, to=100, by=1)
R.rounding.range
RMSE <- rep(101,NA)
RMSE <- rep(NA, 101)
RMSE
R.rounding.range <- seq(from=0, to=100, by=1)
RMSE <- rep(NA, 101)
for(a in R.rounding.range){
history <- matrix(NA, nrow=k.trials, ncol=100+1)
for(i in 1:k.trials){
res <- query(df=available.pums, R = a)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history[i,] <- c(res$sum, indicator)                    # save into our results matrix
releaseData <- as.data.frame(history)
names(releaseData) <- varnames
output <- lm(formula, data=releaseData)
estimates <- output$coef
## Get RMSE
RMSE[a+1] = postResample(estimates, sensitiveData)[1]
}
}
RMSE
plot(RMSE)
query_noise <- function(df, sigma){
## random subset creation
for(j in 1:100){
vec = as.numeric(df[j,2:14])
r = sample(prime.options, size=13, replace = FALSE)
p = (sum(vec*r))%%P%%2
df$p.v[j] = p
}
## subsetting and returning the sum
subset = df[df$p.v == 1,]
sum <- sum(subset$uscitizen)
noisy <- sum + rnorm(1,0,(sigma)^2)
index = as.numeric(rownames(subset))
return(list(sum=noisy, index=index))
}
sigma.range <- seq(from=0, to=100, by=1)
RMSE <- rep(NA, 101)
for(a in sigma.range){
history1 <- matrix(NA, nrow=k.trials, ncol=100+1)
for(i in 1:k.trials){
res <- query_noise(df=available.pums, sigma = a)
indicator <- 1:n %in% res$index                         # convert indices into a series of boolean/dummy variables
indicator <- as.numeric(indicator)
history1[i,] <- c(res$sum, indicator)                    # save into our results matrix
releaseData1 <- as.data.frame(history1)
names(releaseData1) <- varnames
output <- lm(formula, data=releaseData1)
estimates <- output$coef
## Get RMSE
RMSE[a+1] = postResample(estimates, sensitiveData)[1]
}
}
plot(RMSE)
